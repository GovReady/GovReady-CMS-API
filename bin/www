#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-regular-webapp2:server');
var http = require('http');
var swaggerTools = require('swagger-tools');
var jsyaml = require('js-yaml');
var fs = require('fs');
var os = require('os');


/**
 * Set up lets Encrypt.
 */
if (process.env.NODE_ENV === 'production') {
  var LEX = require('letsencrypt-express');
}
else {
  var LEX = require('letsencrypt-express').testing();
}
var lex = LEX.create({
  configDir: os.homedir() + '/letsencrypt/etc'
, approveRegistration: function (hostname, approve) { // leave `null` to disable automatic registration
    if (hostname === process.env.SSL_DOMAIN) { // Or check a database or list of allowed domains
      approve(null, {
        domains: [process.env.SSL_DOMAIN]
      , email: process.env.SSL_EMAIL
      , agreeTos: true
      });
    }
  }
});




// swaggerRouter configuration
var options = {
  swaggerUi: '/swagger.json',
  controllers: './controllers',
  useStubs: process.env.NODE_ENV === 'development' ? true : false // Conditionally turn on stubs (mock mode)
};

// The Swagger document (require it, build it programmatically, fetch it from a URL, ...)
var spec = fs.readFileSync('swagger.yaml', 'utf8');
var swaggerDoc = jsyaml.safeLoad(spec);



/**
 * Set up server.
 */

lex.onRequest = app;

// Initialize the Swagger middleware
swaggerTools.initializeMiddleware(swaggerDoc, function (middleware) {

  // Serve the Swagger documents and Swagger UI
  //app.use(middleware.swaggerUi());

  lex.listen([process.env.PORT || '3000'], process.env.SSL_PORT ? [process.env.SSL_PORT] : [443, 5001], function () {
    var protocol = ('requestCert' in this) ? 'https': 'http';
    console.log("Listening at " + protocol + '://localhost:' + this.address().port);
    console.log("Docs available at " + protocol + '://localhost:' + this.address().port + '/docs');
  });

});


/**
 * Normalize a port into a number, string, or false.
 */
/*
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
*/